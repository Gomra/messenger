<?xml version="1.0" encoding="utf-8"?>
<html>
  <head>
    <meta charset="UTF-8"/>
    <title>doc &ndash; Vala Binding Reference</title>
    <link href="../style.css" rel="stylesheet" type="text/css"/><script src="../scripts.js" type="text/javascript">
    </script>
  </head>
  <body>
    <div class="site_header">doc Reference Manual</div>
    <div class="site_body">
      <div class="site_navigation">
        <ul class="navi_main">
          <li class="package_index"><a href="../index.html">Packages</a></li>
        </ul>
        <hr class="navi_hr"/>
        <ul class="navi_main">
          <li class="package">doc</li>
        </ul>
        <hr class="navi_hr"/>
        <ul class="navi_main">
          <li class="namespace"><a href="Fb.html">Fb</a></li>
        </ul>
      </div>
      <div class="site_content">
        <h1 class="main_title" id="doc">doc</h1>
        <hr class="main_hr"/>
        <h2 class="main_title">Description:</h2>
        <h2 class="main_title">Content:</h2>
        <h3 class="main_title">Namespaces:</h3>
        <ul class="navi_inline">
          <li class="namespace"><a href="Fb.html">Fb</a></li>
          <h3 class="main_title">Classes:</h3>
          <ul class="navi_inline">
            <li class="class"><a href="Fb.Api.html">Api</a> - <span class="brief_description">Represents a Facebook Messenger connection.</span></li>
            <li class="class"><a href="Fb.ApiThread.html">ApiThread</a> - <span class="brief_description">Represents a Facebook message thread.</span>
            </li>
            <li class="class"><a href="Fb.ApiUser.html">ApiUser</a> - <span class="brief_description">Represents a Facebook user.</span></li>
            <li class="class"><a href="Fb.HttpConns.html">HttpConns</a> - <span class="brief_description">Represents a set of <span class="class">
                  RequestHTTP</span>.</span></li>
            <li class="class"><a href="Fb.JsonValues.html">JsonValues</a> - <span class="brief_description">Represents a JSON value handler.</span>
            </li>
            <li class="class"><a href="Fb.Mqtt.html">Mqtt</a> - <span class="brief_description">Represents an MQTT connection.</span></li>
            <li class="class"><a href="Fb.MqttMessage.html">MqttMessage</a> - <span class="brief_description">Represents a reader/writer for an MQTT 
                message.</span></li>
            <li class="class"><a href="Fb.Thrift.html">Thrift</a> - <span class="brief_description">Represents a reader/writer for compact Thrift 
                data.</span></li>
          </ul>
          <h3 class="main_title">Structs:</h3>
          <ul class="navi_inline">
            <li class="struct"><a href="Fb.Id.html">Id</a> - <span class="brief_description">Represents a numeric Facebook identifier.</span></li>
            <li class="struct"><a href="Fb.ApiEvent.html">ApiEvent</a> - <span class="brief_description">Represents a Facebook update event.</span>
            </li>
            <li class="struct"><a href="Fb.ApiMessage.html">ApiMessage</a> - <span class="brief_description">Represents a Facebook user message.
              </span></li>
            <li class="struct"><a href="Fb.ApiPresence.html">ApiPresence</a> - <span class="brief_description">Represents a Facebook presence message.
              </span></li>
            <li class="struct"><a href="Fb.ApiTyping.html">ApiTyping</a> - <span class="brief_description">Represents a Facebook typing message.
              </span></li>
          </ul>
          <h3 class="main_title">Enums:</h3>
          <ul class="navi_inline">
            <li class="enum"><a href="Fb.ApiError.html">ApiError</a> - <span class="brief_description">The error codes for the <span class="enum">
                  ApiError</span> domain.</span></li>
            <li class="enum"><a href="Fb.ApiEventType.html">ApiEventType</a> - <span class="brief_description">The 
                <a href="Fb.ApiEvent.html" class="struct">ApiEvent</a> types.</span></li>
            <li class="enum"><a href="Fb.ApiMessageFlags.html">ApiMessageFlags</a> - <span class="brief_description">The 
                <a href="Fb.ApiMessage.html" class="struct">ApiMessage</a> flags.</span></li>
            <li class="enum"><a href="Fb.JsonType.html">JsonType</a> - <span class="brief_description">The JSON data types.</span></li>
            <li class="enum"><a href="Fb.MqttConnectFlags.html">MqttConnectFlags</a> - <span class="brief_description">The 
                <a href="Fb.MqttMessage.html" class="class">MqttMessage</a> flags for the CONNECT message.</span></li>
            <li class="enum"><a href="Fb.MqttError.html">MqttError</a> - <span class="brief_description">The error codes for the <span class="enum">
                  MqttError</span> domain.</span></li>
            <li class="enum"><a href="Fb.MqttMessageFlags.html">MqttMessageFlags</a> - <span class="brief_description">The 
                <a href="Fb.MqttMessage.html" class="class">MqttMessage</a> flags.</span></li>
            <li class="enum"><a href="Fb.MqttMessageType.html">MqttMessageType</a> - <span class="brief_description">The 
                <a href="Fb.MqttMessage.html" class="class">MqttMessage</a> types.</span></li>
            <li class="enum"><a href="Fb.ThriftType.html">ThriftType</a> - <span class="brief_description">The Thrift data types.</span></li>
            <li class="enum"><a href="Fb.UtilDebugFlags.html">UtilDebugFlags</a> - <span class="brief_description">The debugging message flags.</span>
            </li>
          </ul>
          <h3 class="main_title">Error domains:</h3>
          <ul class="navi_inline">
            <li class="errordomain"><a href="Fb.HttpError.html">HttpError</a> - <span class="brief_description">The error codes for the 
                <span class="errordomain">HttpError</span> domain.</span></li>
            <li class="errordomain"><a href="Fb.JsonError.html">JsonError</a> - <span class="brief_description">The error codes for the 
                <span class="errordomain">JsonError</span> domain.</span></li>
            <li class="errordomain"><a href="Fb.UtilError.html">UtilError</a> - <span class="brief_description">The error codes for the 
                <span class="errordomain">UtilError</span> domain.</span></li>
          </ul>
          <h3 class="main_title">Constants:</h3>
          <ul class="navi_inline">
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_AHOST.html" class="constant">API_AHOST</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The HTTP host for the Facebook API.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_BHOST.html" class="constant">API_BHOST</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The HTTP host for the Facebook BAPI.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_CONTACTS_COUNT.html" class="constant">API_CONTACTS_COUNT</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The maximum amount of contacts to fetch in a single request.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_GHOST.html" class="constant">API_GHOST</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The HTTP host for the Facebook Graph API.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_KEY.html" class="constant">API_KEY</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The Facebook API key.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_CONTACT.html" class="constant">API_QUERY_CONTACT</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `UsersQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_CONTACTS.html" class="constant">API_QUERY_CONTACTS</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `FetchContactsFullQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_CONTACTS_AFTER.html" class="constant">API_QUERY_CONTACTS_AFTER</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `FetchContactsFullWithAfterQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_STICKER.html" class="constant">API_QUERY_STICKER</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `FetchStickersWithPreviewsQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_THREAD.html" class="constant">API_QUERY_THREAD</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `ThreadQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_THREADS.html" class="constant">API_QUERY_THREADS</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `ThreadListQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_QUERY_XMA.html" class="constant">API_QUERY_XMA</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The query hash for the `XMAQuery`.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_SECRET.html" class="constant">API_SECRET</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The Facebook API secret.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.API_THREADS_COUNT.html" class="constant">API_THREADS_COUNT</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The maximum amount of threads to fetch.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.API_WHOST.html" class="constant">API_WHOST</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The HTTP host for the Facebook website.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.ID_STRMAX.html" class="constant">ID_STRMAX</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The maximum length, including a null-terminating character, of the 
                  string representation of an <a href="Fb.Id.html" class="struct">Id</a>.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.MQTT_HOST.html" class="constant">MQTT_HOST</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The MQTT host name for Facebook.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.MQTT_KA.html" class="constant">MQTT_KA</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The keep-alive timeout, in seconds, of the MQTT connection.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.MQTT_LEVEL.html" class="constant">MQTT_LEVEL</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The level of the MQTT version.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_keyword">unowned</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.MQTT_NAME.html" class="constant">MQTT_NAME</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The name of the MQTT version.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.MQTT_PORT.html" class="constant">MQTT_PORT</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The MQTT host port for Facebook.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.MQTT_TIMEOUT_CONN.html" class="constant">MQTT_TIMEOUT_CONN</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The timeout, in milliseconds, to wait for a PING back from the 
                  server.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.MQTT_TIMEOUT_PING.html" class="constant">MQTT_TIMEOUT_PING</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">The timeout, in milliseconds, to send a PING to the server.</span>
              </div></li>
            <li class="constant"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">const</span> <span class="main_basic_type"><span class="struct">int</span></span> <b><a href="Fb.UTIL_DEBUG_INFO.html" class="constant">UTIL_DEBUG_INFO</a></b>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Shortcut <span class="enum">LogLevelFlags</span> for unsafe and 
                  verbose info messages.</span>
              </div></li>
          </ul>
          <h3 class="main_title">Methods:</h3>
          <ul class="navi_inline">
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Fb.http_error_chk.html" class="method">http_error_chk</a></b> (<span class="main_type"><span class="class">Message</span></span> res) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Checks a <span class="class">Message</span> for success.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="struct">Quark</span></span> <b><a href="Fb.http_error_quark.html" class="method">http_error_quark</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets the <span class="struct">Quark</span> of the domain of HTTP 
                  errors.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.http_extract_data.html" class="method">http_extract_data</a></b> (<span class="main_type"><span class="class">RequestHTTP</span></span> req, <span class="main_type"><span class="interface">AsyncResult</span></span> res) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Reads response data from request stream and writes it to the 
                  associated message.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Fb.http_urlcmp.html" class="method">http_urlcmp</a></b> (<span class="main_basic_type"><span class="class">string</span></span> url1, <span class="main_basic_type"><span class="class">string</span></span> url2, <span class="main_basic_type"><span class="struct">bool</span></span> protocol)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Compares two URLs.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_add_bool.html" class="method">json_bldr_add_bool</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name, <span class="main_basic_type"><span class="struct">bool</span></span> value)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Adds a boolean memeber to the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_add_dbl.html" class="method">json_bldr_add_dbl</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name, <span class="main_basic_type"><span class="struct">double</span></span> value)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Adds a floating point memeber to the <span class="class">Builder
                  </span>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_add_int.html" class="method">json_bldr_add_int</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name, <span class="main_basic_type"><span class="struct">int64</span></span> value)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Adds a integer memeber to the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_add_str.html" class="method">json_bldr_add_str</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name, <span class="main_basic_type"><span class="class">string</span></span> value)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Adds a string memeber to the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_arr_begin.html" class="method">json_bldr_arr_begin</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Begins an array member in the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_arr_end.html" class="method">json_bldr_arr_end</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Ends an array member in the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.json_bldr_close.html" class="method">json_bldr_close</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_type"><span class="enum">NodeType</span></span> type, <span class="main_basic_type"><span class="struct">size_t</span></span> size)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Closes the <span class="class">Builder</span> by returning a string 
                  representing the <span class="class">Builder</span>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_obj_begin.html" class="method">json_bldr_obj_begin</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr, <span class="main_basic_type"><span class="class">string</span></span> name)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Begins an object member in the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.json_bldr_obj_end.html" class="method">json_bldr_obj_end</a></b> (<span class="main_type"><span class="class">Builder</span></span> bldr)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Ends an array member in the <span class="class">Builder</span>.
                </span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="struct">Quark</span></span> <b><a href="Fb.json_error_quark.html" class="method">json_error_quark</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets the <span class="struct">Quark</span> of the domain of JSON 
                  errors.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="class">Node</span></span> <b><a href="Fb.json_node_get.html" class="method">json_node_get</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a new <span class="class">Node</span> value from a parent 
                  <span class="class">Node</span> with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="class">Array</span></span> <b><a href="Fb.json_node_get_arr.html" class="method">json_node_get_arr</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a new <span class="class">Array</span> value from a parent 
                  <span class="class">Node</span> with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Fb.json_node_get_bool.html" class="method">json_node_get_bool</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a boolean value from a parent <span class="class">Node</span> 
                  with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">double</span></span> <b><a href="Fb.json_node_get_dbl.html" class="method">json_node_get_dbl</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a floating point value from a parent <span class="class">Node
                  </span> with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">int64</span></span> <b><a href="Fb.json_node_get_int.html" class="method">json_node_get_int</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets an integer value from a parent <span class="class">Node</span> 
                  with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="class">Node</span></span> <b><a href="Fb.json_node_get_nth.html" class="method">json_node_get_nth</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="struct">uint</span></span> n)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a <span class="class">Node</span> value from a parent 
                  <span class="class">Node</span> by index.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.json_node_get_str.html" class="method">json_node_get_str</a></b> (<span class="main_type"><span class="class">Node</span></span> root, <span class="main_basic_type"><span class="class">string</span></span> expr) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets an string value from a parent <span class="class">Node</span> 
                  with a <span class="class">Path</span> expression.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="class">Node</span></span> <b><a href="Fb.json_node_new.html" class="method">json_node_new</a></b> (<span class="main_basic_type"><span class="class">string</span></span> data, <span class="main_basic_type"><span class="struct">ssize_t</span></span> size) <span class="main_keyword">throws</span> <span class="main_type"><span class="class">Error</span></span>
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Creates a new <span class="class">Node</span>.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.marshal_VOID__INT64.html" class="method">marshal_VOID__INT64</a></b> (<span class="main_type"><span class="class">Closure</span></span> closure, <span class="main_type"><span class="struct">Value</span></span> return_value, <span class="main_basic_type"><span class="struct">uint</span></span> n_param_values, <span class="main_type"><span class="struct">Value</span></span> param_values, <span class="main_keyword">void</span>* invocation_hint, <span class="main_keyword">void</span>* marshal_data)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.marshal_VOID__POINTER_BOOLEAN.html" class="method">marshal_VOID__POINTER_BOOLEAN</a></b> (<span class="main_type"><span class="class">Closure</span></span> closure, <span class="main_type"><span class="struct">Value</span></span> return_value, <span class="main_basic_type"><span class="struct">uint</span></span> n_param_values, <span class="main_type"><span class="struct">Value</span></span> param_values, <span class="main_keyword">void</span>* invocation_hint, <span class="main_keyword">void</span>* marshal_data)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_keyword">void</span> <b><a href="Fb.marshal_VOID__STRING_BOXED.html" class="method">marshal_VOID__STRING_BOXED</a></b> (<span class="main_type"><span class="class">Closure</span></span> closure, <span class="main_type"><span class="struct">Value</span></span> return_value, <span class="main_basic_type"><span class="struct">uint</span></span> n_param_values, <span class="main_type"><span class="struct">Value</span></span> param_values, <span class="main_keyword">void</span>* invocation_hint, <span class="main_keyword">void</span>* marshal_data)
              </span>
              <div class="leaf_brief_description">
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_type"><span class="struct">Quark</span></span> <b><a href="Fb.util_error_quark.html" class="method">util_error_quark</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets the <span class="struct">Quark</span> of the domain of utility 
                  errors.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.util_get_locale.html" class="method">util_get_locale</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets the locale string (ex: en_US) from the system.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.util_rand_alnum.html" class="method">util_rand_alnum</a></b> (<span class="main_basic_type"><span class="struct">uint</span></span> len)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a random alphanumeric (A-Za-z0-9) string.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="class">string</span></span> <b><a href="Fb.util_rand_uuid.html" class="method">util_rand_uuid</a></b> ()
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Gets a random UUID string.</span>
              </div></li>
            <li class="method"><span class="leaf_code_definition"><span class="main_keyword">public</span> <span class="main_basic_type"><span class="struct">bool</span></span> <b><a href="Fb.util_zlib_test.html" class="method">util_zlib_test</a></b> (<span class="main_type"><span class="class">ByteArray</span></span> bytes)
              </span>
              <div class="leaf_brief_description"><span class="brief_description">Tests if the <span class="class">ByteArray</span> is zlib 
                  compressed.</span>
              </div></li>
          </ul>
        </ul>
      </div>
    </div><br/>
    <div class="site_footer">Generated by <a href="http://www.valadoc.org/">Valadoc</a>
    </div>
  </body>
</html>